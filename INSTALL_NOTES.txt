--------------------------
GENERAL INSTALLATION NOTES
--------------------------

----------
C COMPILER
----------

First, ensure that you have a suitable, working C compiler.

A simple way to proceed is install gcc compilers to the default location from:
         http://hpc.sourceforge.net

This will install everything into /usr/local

If you use MacPorts, Homebrew, or APT, these can also be used to easily install gcc.

You can test that you have a working "gcc" C by running the following from the command line

    echo '#include<stdio.h>' > t.c && echo 'int main(){printf("It seems to work!\n");}' >> t.c && gcc t.c && ./a.out && rm -f t.c a.out

If you plan to use quadruple precision, you need to ensure that you have an actual version
of gcc installed. This is harder than it should be, because Apple irresponsibly installs
something called "gcc" which actually a wrapper for their own compiler. You can check by running

    gcc --version

If you see a message about "Apple LLVM", then you have the wrong compiler!

----------------
DOUBLE PRECISION
----------------

To install with double precision.  This reproduces the behaviour of the
python prototype code.  In this case you must use Patrick's hacked version of
PETSc because this version uses the dense direct solver that is required. But
you can allow PETSc to automatically download and install SUNDIALS
(with double support) so there is no need to install SUNDIALS separately.

0. Comment out any existing references to PETSC_DIR and PETSC_ARCH in your
profile, bash_profile, bashrc, etc. (clear these variables)

1. get the hacked version of PETSc (Patrick must give you read access to his
bitbucket - email patrick.sanan@gmail.com with your bitbucket username):

    cd /somewhere/to/install
    git clone https://bitbucket.org/psanan/petscfork -b psanan/ts-sundials-quad-hack petsc-double-direct

2. change directories

    cd petsc-double-direct/

3a. configure PETSc using the following command:

    ./configure --with-debugging=0 --with-fc=0 --download-sundials --download-mpich --with-cc=gcc --with-cxx=g++ --download-mpich --COPTFLAGS="-g -O3" --CXXOPTFLAGS="-g -O3"

3b.  [Aside] For a debug build, amend command above to use --with-debugging=1

4. make (the following all assume an optimised build, i.e, 3a above).
PETSc's configure process, if successful, will end by printing out a command which you can copy and paste, e.g.

    make PETSC_DIR=/Users/dan/Programs/petsc/petsc-double-direct PETSC_ARCH=arch-darwin-c-opt all

5. run tests. PETSc's make process will print this out for you to copy and paste e.g.:

    make PETSC_DIR=/Users/dan/Programs/petsc/petsc-double-direct PETSC_ARCH=arch-darwin-c-opt test

6. Note the value of PETSC_ARCH (will look something like arch-xxx-yyy) for later

-------------------
QUADRUPLE PRECISION
-------------------

0. comment out any existing references to PETSC_DIR and PETSC_ARCH in your
profile or bash_profile and resource (clear these variables)

---- A. Install SUNDIALS with quadruple precision ----

1. Patrick needs to give you read access to his bitbucket to obtain
   the quad-supported version of SUNDIALS

2. Clone from git repository:
   cd /somewhere/to/install
   git clone https://bitbucket.org/psanan/sundials-quad.git sundials-quad

3. Make sure that you have cmake available

    cmake --version

If this fails, then install cmake from your package manager (homebrew, macports, apt,..) or by following the instructions at cmake.org/download

    sudo port install cmake           # MacPorts
    brew install cmake                # Homebrew
    sudo apt-get install cmake        # apt

4. Configure, build, and install SUNDIALS

    cd sundials-quad
    mkdir install
    mkdir build
    cd build
    cmake ..
    ccmake .                          # with apt you may need to install these separately

Use the ccmake interface to set these values:

    CMAKE_C_COMPILER: /usr/local/bin/gcc
    CMAKE_C_FLAGS: -O3
    CMAKE_INSTALL_PREFIX: ../install
    EXAMPLES_INSTALL_PATH: ../install/examples
    SUNDIALS_PRECISION: quadruple

Make sure you type "c" to configure once you have entered these values, then [q]uit.

Note: specify the same C compiler you used to install PETSc (probably "gcc")
Note: you may also directly edit CMakeCache.txt to edit these values, followed by "cmake .." again

Make and install:

    make && make install

---- B: Install PETSc with quadruple precision ----

0. comment out any existing references to PETSC_DIR and PETSC_ARCH in your
profile or bash_profile and resource (clear these variables)

1. get the hacked version of PETSc (Patrick must give you read access to his
bitbucket):

    cd /somewhere/to/install
    git clone https://bitbucket.org/psanan/petscfork -b psanan/ts-sundials-quad-hack petsc-quad-direct

2. change directories

    cd petsc-quad-direct

3a. configure PETSc using the following command.  Crucially, in the next step we point PETSc to the quadruple precision installation of SUNDIALS that we just created (change /somewhere/to/install to the place that you installed SUNDIALS) :

    ./configure --with-debugging=0 --with-fc=0 --with-precision=__float128 --with-sundials=1 --with-sundials-dir=/somewhere/to/install/sundials-quad/install --download-mpich --download-f2cblaslapack --with-cc=gcc --with-cxx=g++ --COPTFLAGS="-g -O3" --CXXOPTFLAGS="-g -O3"

3b.  [Aside] For a debug build, amend command above to use --with-debugging=1

4. make by copying the line (the following all assume an optimised build, i.e, 3a above) e.g.

    make PETSC_DIR=/Users/dan/Programs/petsc/petsc-quad-direct PETSC_ARCH=arch-darwin-c-opt all

5. run tests by copying the provided line e.g.

    make PETSC_DIR=/Users/dan/Programs/petsc/petsc-quad-direct PETSC_ARCH=arch-darwin-c-opt test

6. Note the value of PETSC_ARCH (will look something like arch-xxx-yyy) for later

------
C CODE
------

1. In your environment, set PETSC_DIR and PETSC_ARCH to the PETSc installation that you wish to use (either the quad or double precision, as above)

    export PETSC_DIR=/somewhere/to/install/petsc-double-direct # or /somewhere/to/install/petsc-quad-direct
    export PETSC_ARCH=arch-xxx-yyy

2. make (from this directory)

    make clean
    make -j

3. test (TODO WIP)

   make test

You should now be ready to use the code!




------------------------------------------------
OLD INSTRUCTIONS.  KEPT FOR REFERENCE BUT IGNORE
------------------------------------------------

The following should work to clone the maint branch and build. You
should change the C/C++/Fortran compilers to whatever works on your
system:

cd /somewhere/to/install
git clone https://bitbucket.org/petsc/petsc -b maint petsc-maint
cd petsc-maint
[See below for Petsc configure for double or quad precision]

Then follow the instructions to build and test a debug build. It will
produce a directory called arch-some-stuff which will be your
PETSC_ARCH, and PETSC_DIR is the directory named "petsc-maint" above.
If you set those, you should be able to build and play with the tests,
for example

    cd $PETSC_DIR/src/ts/examples/tutorials
    make ex1
    ./ex1 -ts_monitor -ts_view -ts_type sundials

The connection here is glacial so I haven't directly tested the above
- apologies in advance when it fails but give it a shot!

If you want master, repeat the above but without the "-b maint" in the
"git clone" command, and with petsc-master as the directory name. You
can then have parallel builds of the two versions of the library.
Better to use maint until we need something specific from master

for configuring petsc with double precision:

./configure PETSC_ARCH=arch-darwin-c --download-mpich --download-sundials --with-cc=gcc --with-cxx=g++ --with-fc=gfortran --with-debugging=0 --FOPTFLAGS='-g -O3' --COPTFLAGS='-g -O3' --CXXOPTFLAGS='-g -O3'
make PETSC_ARCH=arch-darwin-c

for configuring petsc with quad precision:

./configure PETSC_ARCH=arch-darwin-c-quad --with-precision=__float128 --download-f2cblaslapack --download-mpich --with-cc=gcc --with-cxx=g++ --with-fc=gfortran --with-debugging=0 --FOPTFLAGS='-g -O3' --COPTFLAGS='-g -O3' --CXXOPTFLAGS='-g -O3'
make PETSC_ARCH=arch-darwin-c-quad
